<pre class='metadata'>
Title: <code>__COUNTER__</code>
Group: WG21
Shortname: Pxxxx
Revision: 0
Status: NP
Date: 2024-08-20
Editor: Jeremy Rifkin
Abstract: `__COUNTER__` is a common predefined macro provided as a language extension by all major implementations. This paper aims to standardize existing practices.
Markup Shorthands: markdown on
ED: github.com
</pre>

# Introduction

The `__COUNTER__` pre-defined macro is a common language extension for C and C++ which expands to an integer literal
starting at `0` and incrementing by `1` every time it expanded in a translation unit. This a widely used, albeit niche,
utility that is useful for generating unique identifiers with preprocessor macros.

# Motivating Examples

A brief survey of `__COUNTER__` use in the C and C++ community:

- Google benchmark uses `__COUNTER__` for [unique identifiers](https://github.com/google/benchmark/blob/c19cfee61e136effb05a7fc8a037b0db3b13bd4c/include/benchmark/benchmark.h#L1531-L1538), falling back to `__LINE__` if `__COUNTER__` isn't present or doesn't behave as expected
- Google Orbit uses `__COUNTER__` for [unique identifiers](https://github.com/google/orbit/blob/d863597a5c15cd0930bf9dd63b0451e2327e105e/src/ApiInterface/include/ApiInterface/Orbit.h#L411)
- LLVM uses `__COUNTER__` for [unique identifiers](https://github.com/llvm/llvm-project/blob/c557d8520413476221a4f3bf2b7b3fed17681691/compiler-rt/lib/builtins/int_util.h#L26) as well as in sanitizer code to [prevent ICF](https://github.com/llvm/llvm-project/blob/c557d8520413476221a4f3bf2b7b3fed17681691/compiler-rt/lib/sanitizer_common/sanitizer_win_dll_thunk.h#L55)
- Catch2 uses `__COUNTER__` for [unique identifiers](https://github.com/catchorg/Catch2/blob/fa306fc85eca7cc68a5362c503019fa823cbe411/src/catch2/internal/catch_unique_name.hpp#L15), falling back to `__LINE__`
- Tensorflow uses `__COUNTER__` extensively, primarily for [unique identifiers](https://github.com/tensorflow/tensorflow/blob/58ee1a52795980c22ea154395ad17e09683ebff8/tensorflow/c/tf_status_helper.h#L50)
- Chromium uses `__COUNTER__` for unique identifier generation, e.g. in [crash logging code](https://github.com/chromium/chromium/blob/d2fdda68e8c5489cd8bbd7f81b423d54ddc3f588/base/debug/crash_logging.h#L121-L180), as well as for creating [unique tags for `ABORT()`s](https://github.com/chromium/chromium/blob/818c1de64ccf78e98cca71b793642eb4bc623f2e/sandbox/mac/sandbox_logging.cc#L21-L34)
- Folly uses `__COUNTER__` for [unique identifiers](https://github.com/facebook/folly/blob/4550c4cd46a91e7bef9d348cad91dd1b07a876c8/folly/Preprocessor.h#L82-L103), falling back to `__LINE__` if not present
- v8 uses `__COUNTER__` for [unique identifiers](https://github.com/v8/v8/blob/04c9912de3373fa4779890fa70bf5bae670c61c8/src/base/macros.h#L24)
- Metric Panda Games uses `__COUNTER__` for [lookup tables](https://www.metricpanda.com/rival-fortress-update-39-how-i-use-__counter__-to-localize-text-and-hash-strings-at-compile-time/) as part of a localization and compile-time string hashing system.

# Implementation Support

`__COUNTER__` has long been supported by all major implementations of C and C++:

<table>
    <tr>
        <th>Compiler</th>
        <th>Earliest Version Tested</th>
        <th>Earliest Version Tested<br/>Supporting `__COUNTER__`</th>
    </tr>
    <tr>
        <td>GCC</td>
        <td>3.4.6 ❌</td>
        <td>4.4.7 ✔️</td>
    </tr>
    <tr>
        <td>Clang</td>
        <td>3.0.0 ✔️</td>
        <td>3.0.0 ✔️</td>
    </tr>
    <tr>
        <td>MSVC</td>
        <td>19.0 ✔️</td>
        <td>19.0 ✔️</td>
    </tr>
    <tr>
        <td>ICC</td>
        <td>13.0.1 ✔️</td>
        <td>13.0.1 ✔️</td>
    </tr>
    <tr>
        <td>ICX</td>
        <td>2021.1.2 ✔️</td>
        <td>2021.1.2 ✔️</td>
    </tr>
    <tr>
        <td>EDG</td>
        <td>6.5 ✔️*</td>
        <td>6.5 ✔️*</td>
    </tr>
    <tr>
        <td>TCC</td>
        <td>0.9.27 ✔️</td>
        <td>0.9.27 ✔️</td>
    </tr>
    <tr>
        <td>Movfuscator</td>
        <td>Trunk ✔️</td>
        <td>Trunk ✔️</td>
    </tr>
</table>

*: Supported only in `--microsoft` mode

Comparison: [https://godbolt.org/z/vM7xsPE3M](https://godbolt.org/z/vM7xsPE3M)

# Proposed Wording

Proposed wording relative to [[!N4950]]:

Insert a bullet point in <a href="https://timsong-cpp.github.io/cppwp/n4950/cpp.predefined#1">[cpp.predefined/1]</a> before bullet 1:

<blockquote>
<ul>
<li><ins>`__COUNTER__`<br/>An integer literal starting at `0` and incrementing by `1` each time `__COUNTER__` expanded.</ins></li>
</ul>
</blockquote>

# Design Considerations

## Precompiled Headers

MSVC remembers the state of `__COUNTER__` in precompiled headers. GCC notes that the `__COUNTER__` macro must not be
expanded prior to inclusion of a pre-compiled header, not using the precompiled header in such a case.

## Modules

TODO

## ODR

TODO
